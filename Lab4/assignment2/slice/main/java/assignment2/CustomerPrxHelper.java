// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `assignment2.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package assignment2;

/**
 * Provides type-specific helper functions.
 **/
public final class CustomerPrxHelper extends Ice.ObjectPrxHelperBase implements CustomerPrx
{
    private static final String __calcInvestmentInterest_name = "calcInvestmentInterest";

    public String calcInvestmentInterest(int periodInMonths, int amount, Currency currency)
    {
        return calcInvestmentInterest(periodInMonths, amount, currency, null, false);
    }

    public String calcInvestmentInterest(int periodInMonths, int amount, Currency currency, java.util.Map<String, String> __ctx)
    {
        return calcInvestmentInterest(periodInMonths, amount, currency, __ctx, true);
    }

    private String calcInvestmentInterest(int periodInMonths, int amount, Currency currency, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__calcInvestmentInterest_name);
        return end_calcInvestmentInterest(begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, int amount, Currency currency)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, null, false, false, null);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, int amount, Currency currency, java.util.Map<String, String> __ctx)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, int amount, Currency currency, Ice.Callback __cb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, int amount, Currency currency, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, int amount, Currency currency, Callback_Customer_calcInvestmentInterest __cb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, int amount, Currency currency, java.util.Map<String, String> __ctx, Callback_Customer_calcInvestmentInterest __cb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, 
                                                        int amount, 
                                                        Currency currency, 
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, 
                                                        int amount, 
                                                        Currency currency, 
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, 
                                                        int amount, 
                                                        Currency currency, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, 
                                                        int amount, 
                                                        Currency currency, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, 
                                                         int amount, 
                                                         Currency currency, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_calcInvestmentInterest(periodInMonths, amount, currency, __ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        CustomerPrxHelper.__calcInvestmentInterest_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_calcInvestmentInterest(int periodInMonths, 
                                                         int amount, 
                                                         Currency currency, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__calcInvestmentInterest_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__calcInvestmentInterest_name, __cb);
        try
        {
            __result.prepare(__calcInvestmentInterest_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(periodInMonths);
            __os.writeInt(amount);
            Currency.__write(__os, currency);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_calcInvestmentInterest(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __calcInvestmentInterest_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __calcInvestmentInterest_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        assignment2.CustomerPrx __proxy = (assignment2.CustomerPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_calcInvestmentInterest(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __calcLoadInterest_name = "calcLoadInterest";

    public String calcLoadInterest(int periodInMoths, int amount, Currency currency)
    {
        return calcLoadInterest(periodInMoths, amount, currency, null, false);
    }

    public String calcLoadInterest(int periodInMoths, int amount, Currency currency, java.util.Map<String, String> __ctx)
    {
        return calcLoadInterest(periodInMoths, amount, currency, __ctx, true);
    }

    private String calcLoadInterest(int periodInMoths, int amount, Currency currency, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__calcLoadInterest_name);
        return end_calcLoadInterest(begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, int amount, Currency currency)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, null, false, false, null);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, int amount, Currency currency, java.util.Map<String, String> __ctx)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, int amount, Currency currency, Ice.Callback __cb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, int amount, Currency currency, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, int amount, Currency currency, Callback_Customer_calcLoadInterest __cb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, int amount, Currency currency, java.util.Map<String, String> __ctx, Callback_Customer_calcLoadInterest __cb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, 
                                                  int amount, 
                                                  Currency currency, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, 
                                                  int amount, 
                                                  Currency currency, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, 
                                                  int amount, 
                                                  Currency currency, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, 
                                                  int amount, 
                                                  Currency currency, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, 
                                                   int amount, 
                                                   Currency currency, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_calcLoadInterest(periodInMoths, amount, currency, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  CustomerPrxHelper.__calcLoadInterest_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_calcLoadInterest(int periodInMoths, 
                                                   int amount, 
                                                   Currency currency, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__calcLoadInterest_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__calcLoadInterest_name, __cb);
        try
        {
            __result.prepare(__calcLoadInterest_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(periodInMoths);
            __os.writeInt(amount);
            Currency.__write(__os, currency);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_calcLoadInterest(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __calcLoadInterest_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __calcLoadInterest_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        assignment2.CustomerPrx __proxy = (assignment2.CustomerPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_calcLoadInterest(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getInvestments_name = "getInvestments";

    public Investment[] getInvestments()
    {
        return getInvestments(null, false);
    }

    public Investment[] getInvestments(java.util.Map<String, String> __ctx)
    {
        return getInvestments(__ctx, true);
    }

    private Investment[] getInvestments(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getInvestments_name);
        return end_getInvestments(begin_getInvestments(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getInvestments()
    {
        return begin_getInvestments(null, false, false, null);
    }

    public Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx)
    {
        return begin_getInvestments(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getInvestments(Ice.Callback __cb)
    {
        return begin_getInvestments(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInvestments(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInvestments(Callback_Customer_getInvestments __cb)
    {
        return begin_getInvestments(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx, Callback_Customer_getInvestments __cb)
    {
        return begin_getInvestments(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInvestments(IceInternal.Functional_GenericCallback1<Investment[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInvestments(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInvestments(IceInternal.Functional_GenericCallback1<Investment[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInvestments(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<Investment[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInvestments(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<Investment[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInvestments(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<Investment[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInvestments(__ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<assignment2.Investment[]>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                CustomerPrxHelper.__getInvestments_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_getInvestments(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInvestments_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getInvestments_name, __cb);
        try
        {
            __result.prepare(__getInvestments_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Investment[] end_getInvestments(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getInvestments_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Investment[] __ret;
            __ret = investmentsHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getInvestments_completed(Ice.TwowayCallbackArg1<Investment[]> __cb, Ice.AsyncResult __result)
    {
        assignment2.CustomerPrx __proxy = (assignment2.CustomerPrx)__result.getProxy();
        Investment[] __ret = null;
        try
        {
            __ret = __proxy.end_getInvestments(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getLoans_name = "getLoans";

    public Loan[] getLoans()
    {
        return getLoans(null, false);
    }

    public Loan[] getLoans(java.util.Map<String, String> __ctx)
    {
        return getLoans(__ctx, true);
    }

    private Loan[] getLoans(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getLoans_name);
        return end_getLoans(begin_getLoans(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getLoans()
    {
        return begin_getLoans(null, false, false, null);
    }

    public Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx)
    {
        return begin_getLoans(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getLoans(Ice.Callback __cb)
    {
        return begin_getLoans(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLoans(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLoans(Callback_Customer_getLoans __cb)
    {
        return begin_getLoans(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx, Callback_Customer_getLoans __cb)
    {
        return begin_getLoans(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getLoans(IceInternal.Functional_GenericCallback1<Loan[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLoans(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLoans(IceInternal.Functional_GenericCallback1<Loan[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLoans(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<Loan[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getLoans(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<Loan[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLoans(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<Loan[]> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getLoans(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<assignment2.Loan[]>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          CustomerPrxHelper.__getLoans_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_getLoans(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLoans_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getLoans_name, __cb);
        try
        {
            __result.prepare(__getLoans_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Loan[] end_getLoans(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getLoans_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Loan[] __ret;
            __ret = loansHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getLoans_completed(Ice.TwowayCallbackArg1<Loan[]> __cb, Ice.AsyncResult __result)
    {
        assignment2.CustomerPrx __proxy = (assignment2.CustomerPrx)__result.getProxy();
        Loan[] __ret = null;
        try
        {
            __ret = __proxy.end_getLoans(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __login_name = "login";

    public void login()
    {
        login(null, false);
    }

    public void login(java.util.Map<String, String> __ctx)
    {
        login(__ctx, true);
    }

    private void login(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_login(begin_login(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_login()
    {
        return begin_login(null, false, false, null);
    }

    public Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx)
    {
        return begin_login(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_login(Ice.Callback __cb)
    {
        return begin_login(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(Callback_Customer_login __cb)
    {
        return begin_login(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx, Callback_Customer_login __cb)
    {
        return begin_login(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(__ctx, 
                           __explicitCtx, 
                           __synchronous, 
                           new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_login(java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__login_name, __cb);
        try
        {
            __result.prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_login(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __login_name);
    }

    private static final String __logout_name = "logout";

    public void logout()
    {
        logout(null, false);
    }

    public void logout(java.util.Map<String, String> __ctx)
    {
        logout(__ctx, true);
    }

    private void logout(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_logout(begin_logout(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_logout()
    {
        return begin_logout(null, false, false, null);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx)
    {
        return begin_logout(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_logout(Ice.Callback __cb)
    {
        return begin_logout(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logout(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logout(Callback_Customer_logout __cb)
    {
        return begin_logout(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, Callback_Customer_logout __cb)
    {
        return begin_logout(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logout(IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logout(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logout(IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logout(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(__ctx, 
                            __explicitCtx, 
                            __synchronous, 
                            new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__logout_name, __cb);
        try
        {
            __result.prepare(__logout_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_logout(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __logout_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CustomerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), CustomerPrx.class, CustomerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CustomerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), CustomerPrx.class, CustomerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CustomerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), CustomerPrx.class, CustomerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CustomerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), CustomerPrx.class, CustomerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static CustomerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, CustomerPrx.class, CustomerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static CustomerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, CustomerPrx.class, CustomerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::assignment2::Customer"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, CustomerPrx v)
    {
        __os.writeProxy(v);
    }

    public static CustomerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CustomerPrxHelper result = new CustomerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
